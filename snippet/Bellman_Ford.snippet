<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Bellman-Ford</Title>
      <Shortcut>mybellmanford</Shortcut>
      <Description>Bellman-Ford algorithm</Description>
      <Author>Yohta Kimura id:rajyan</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <!--<SnippetType>SurroundsWith</SnippetType>-->
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="false"></Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[template<class T = lint>
struct Edge {
	int from, to;
	T cost;
	Edge() {}
	Edge(int from, int to, T cost) : from(from), to(to), cost(cost) {}
};

template<class T>
vector<T> Bellman_Ford(vector<Edge<T>> &edges, int V, int st) {
	const T INF = numeric_limits<T>::max();
	vector<T> dist(V, INF);
	dist[st] = 0;
	for (int i = 0; i < V - 1; i++) {
		for (const auto &ele : edges) {
			if (dist[ele.from] == INF) continue;
			dist[ele.to] = min(dist[ele.to], dist[ele.from] + ele.cost);
		}
	}
	for (const auto &ele : edges) { // finding negative loop
		if (dist[ele.from] == INF) continue;
		if (dist[ele.from] == -INF) dist[ele.to] = -INF; // src is nloop -> dst is nloop
		if (dist[ele.to] > dist[ele.from] + ele.cost) dist[ele.to] = -INF; // chmin is possible -> nloop
	}
	return dist;
}$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>