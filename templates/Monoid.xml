<template name="mymonoid" value="template&lt;class T, T (*F)(T a, T b)&gt;&#10;class Monoid {&#10;    class Identity {};&#10;public:&#10;    using type = T;&#10;    using vt = variant&lt;Identity, T&gt;;&#10;&#10;    [[nodiscard]] constexpr vt op(const vt &amp;a, const vt &amp;b) const {&#10;        if (a.index() == 1 &amp;&amp; b.index() == 1) return F(get&lt;T&gt;(a), get&lt;T&gt;(b));&#10;        else if (a.index() == 0) return b;&#10;        else return a;&#10;    };&#10;    [[nodiscard]] constexpr vt identity() const { return Identity{}; }&#10;};&#10;&#10;constexpr auto op_add = [](auto l, auto r) { return l + r; };&#10;constexpr auto op_mul = [](auto l, auto r) { return l * r; };&#10;constexpr auto op_max = [](auto l, auto r) { return max(l, r); };&#10;constexpr auto op_min = [](auto l, auto r) { return min(l, r); };&#10;&#10;template&lt;class T&gt;&#10;using monoid_add = Monoid&lt;T, op_add&gt;;&#10;template&lt;class T&gt;&#10;using monoid_mul = Monoid&lt;T, op_mul&gt;;&#10;template&lt;class T&gt;&#10;using monoid_max = Monoid&lt;T, op_max&gt;;&#10;template&lt;class T&gt;&#10;using monoid_min = Monoid&lt;T, op_min&gt;;&#10;" description="" toReformat="false" toShortenFQNames="true">
    <context>
        <option name="OC_DECLARATION_C" value="true"/>
        <option name="OC_DECLARATION_CPP" value="true"/>
    </context>
</template>