<template name="mymonoid" value="template&lt;class T&gt;&#10;class Monoid {&#10;    class Identity {};&#10;    using op_t = T (*)(T a, T b);&#10;public:&#10;    using vt = variant&lt;Identity, T&gt;;&#10;&#10;    constexpr explicit Monoid(op_t op_) : base_op(op_) {}&#10;&#10;    [[nodiscard]] constexpr vt op(const vt &amp;a, const vt &amp;b) const {&#10;        if (a.index() == 1 &amp;&amp; b.index() == 1) return base_op(get&lt;T&gt;(a), get&lt;T&gt;(b));&#10;        else if (a.index() == 0) return b;&#10;        else return a;&#10;    };&#10;    [[nodiscard]] constexpr Identity identity() const { return Identity{}; }&#10;&#10;private:&#10;    op_t base_op;&#10;};&#10;" description="" toReformat="false" toShortenFQNames="true">
    <context>
        <option name="OC_DECLARATION_C" value="true"/>
        <option name="OC_DECLARATION_CPP" value="true"/>
    </context>
</template>