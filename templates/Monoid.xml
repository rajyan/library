<template name="mymonoid" value="template&lt;class T, T (*F)(T, T), T (*e) = nullptr&gt;&#10;class Monoid {&#10;    class Identity {};&#10;&#10;public:&#10;    using type = T;&#10;    using vt = conditional_t&lt;is_null_pointer_v&lt;decltype(e)&gt;, variant&lt;Identity, T&gt;, T&gt;;&#10;&#10;    [[nodiscard]] constexpr vt op(const vt &amp;a, const vt &amp;b) const {&#10;        if constexpr (e) return F(a, b);&#10;        else if (a.index() == 1 &amp;&amp; b.index() == 1) return F(get&lt;T&gt;(a), get&lt;T&gt;(b));&#10;        else if (a.index() == 0) return b;&#10;        else return a;&#10;    };&#10;    [[nodiscard]] constexpr vt identity() const {&#10;        if constexpr (e) return *e;&#10;        else return Identity{};&#10;    }&#10;};&#10;&#10;namespace monoid {&#10;    constexpr auto op_add = [](auto l, auto r) { return l + r; };&#10;    constexpr auto op_mul = [](auto l, auto r) { return l * r; };&#10;    constexpr auto op_max = [](auto l, auto r) { return max(l, r); };&#10;    constexpr auto op_min = [](auto l, auto r) { return min(l, r); };&#10;    template&lt;class T&gt; T e_add = T{};&#10;    template&lt;class T&gt; T e_mul = T{1};&#10;    template&lt;class T&gt; T e_max = numeric_limits&lt;T&gt;::max();&#10;    template&lt;class T&gt; T e_min = numeric_limits&lt;T&gt;::min();&#10;    template&lt;class T&gt; using add = Monoid&lt;T, monoid::op_add, &amp;monoid::e_add&lt;T&gt;&gt;;&#10;    template&lt;class T&gt; using mul = Monoid&lt;T, monoid::op_mul, &amp;monoid::e_mul&lt;T&gt;&gt;;&#10;    template&lt;class T&gt; using max = Monoid&lt;T, monoid::op_max, &amp;monoid::e_max&lt;T&gt;&gt;;&#10;    template&lt;class T&gt; using min = Monoid&lt;T, monoid::op_min, &amp;monoid::e_min&lt;T&gt;&gt;;&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <context>
        <option name="OC_DECLARATION_C" value="true"/>
        <option name="OC_DECLARATION_CPP" value="true"/>
    </context>
</template>