<template name="myrollinghash" value="template&lt;int Modulo = MOD&gt;&#10;struct Mint {&#10;&#10;    lint val;&#10;    constexpr explicit Mint(lint v = 0) noexcept: val(v % Modulo) { if (val &lt; 0) val += Modulo; }&#10;&#10;    constexpr Mint &amp;operator+=(const Mint &amp;r) noexcept {&#10;        val += r.val;&#10;        if (val &gt;= Modulo) val -= Modulo;&#10;        return *this;&#10;    }&#10;    constexpr Mint &amp;operator-=(const Mint &amp;r) noexcept {&#10;        val -= r.val;&#10;        if (val &lt; 0) val += Modulo;&#10;        return *this;&#10;    }&#10;    constexpr Mint &amp;operator*=(const Mint &amp;r) noexcept {&#10;        val = val * r.val % Modulo;&#10;        return *this;&#10;    }&#10;    constexpr Mint &amp;operator/=(const Mint &amp;r) noexcept {&#10;        lint a = r.val, b = Modulo, u = 1, v = 0;&#10;        while (b) {&#10;            lint t = a / b;&#10;            a -= t * b;&#10;            swap(a, b);&#10;            u -= t * v;&#10;            swap(u, v);&#10;        }&#10;        val = val * u % Modulo;&#10;        if (val &lt; 0) val += Modulo;&#10;        return *this;&#10;    }&#10;&#10;    constexpr Mint operator+(const Mint &amp;r) const noexcept { return Mint(*this) += r; }&#10;    constexpr Mint operator-(const Mint &amp;r) const noexcept { return Mint(*this) -= r; }&#10;    constexpr Mint operator*(const Mint &amp;r) const noexcept { return Mint(*this) *= r; }&#10;    constexpr Mint operator/(const Mint &amp;r) const noexcept { return Mint(*this) /= r; }&#10;&#10;    constexpr int getmod() { return Modulo; }&#10;    constexpr Mint operator-() const noexcept { return val ? Modulo - val : 0; }&#10;&#10;    constexpr bool operator==(const Mint &amp;r) const noexcept { return val == r.val; }&#10;    constexpr bool operator!=(const Mint &amp;r) const noexcept { return val != r.val; }&#10;&#10;    friend ostream &amp;operator&lt;&lt;(ostream &amp;os, const Mint&lt;Modulo&gt; &amp;x) noexcept { return os &lt;&lt; x.val; }&#10;    friend istream &amp;operator&gt;&gt;(istream &amp;is, Mint&lt;Modulo&gt; &amp;x) noexcept {&#10;        lint tmp;&#10;        is &gt;&gt; tmp;&#10;        x = Mint(tmp);&#10;        return is;&#10;    }&#10;&#10;    constexpr Mint pow(lint n) noexcept {&#10;        Mint res{1}, tmp{val};&#10;        while (n &gt; 0) {&#10;            if (n &amp; 1) res *= tmp;&#10;            tmp *= tmp;&#10;            n &gt;&gt;= 1;&#10;        }&#10;        return res;&#10;    }&#10;};&#10;&#10;using mint = Mint&lt;&gt;;&#10;&#10;//// mod, base from https://gist.github.com/privet-kitty/295ac9202b7abb3039b493f8238bf40f&#10;class RollingHash {&#10;&#10;private:&#10;    using Mod = Mint&lt;2147483647&gt;;&#10;&#10;    vector&lt;Mod&gt; hash1, pow1;&#10;    vector&lt;Mod&gt; hash2, pow2;&#10;    const int base1 = 2147483634;&#10;    const int base2 = 2147483627;&#10;    int sz;&#10;&#10;public:&#10;    RollingHash(const string &amp;s) : sz(s.size()) {&#10;&#10;        hash1.assign(sz + 1, 0);&#10;        pow1.assign(sz + 1, 1);&#10;        hash2.assign(sz + 1, 0);&#10;        pow2.assign(sz + 1, 1);&#10;&#10;        for (int i = 0; i &lt; sz; i++) {&#10;            hash1[i + 1] = hash1[i] * base1 + s[i];&#10;            pow1[i + 1] = pow1[i] * base1;&#10;            hash2[i + 1] = hash2[i] * base2 + s[i];&#10;            pow2[i + 1] = pow2[i] * base2;&#10;        }&#10;    }&#10;&#10;    pair&lt;int, int&gt; get(int l, int r) {&#10;        int res1 = (hash1[r] - hash1[l] * pow1[r - l]).val;&#10;        int res2 = (hash2[r] - hash2[l] * pow2[r - l]).val;&#10;        return {res1, res2};&#10;    }&#10;};&#10;" description="" toReformat="false" toShortenFQNames="true">
    <context>
        <option name="OC_DECLARATION_C" value="true"/>
        <option name="OC_DECLARATION_CPP" value="true"/>
        <option name="OC_STATEMENT_C" value="true"/>
        <option name="OC_STATEMENT_CPP" value="true"/>
    </context>
</template>