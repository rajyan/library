<template name="mymatrix2d" value="template&lt;class T&gt;&#10;struct Point2D {&#10;    T x{}, y{};&#10;&#10;    constexpr Point2D() = default;&#10;    constexpr Point2D(const T &amp;x, const T &amp;y) noexcept: x(x), y(y) {};&#10;    constexpr explicit Point2D(const pair&lt;T, T&gt; &amp;p) noexcept: x(p.first), y(p.second) {};&#10;&#10;    constexpr bool operator==(const Point2D &amp;rhs) const noexcept { return x == rhs.x &amp;&amp; y == rhs.y; }&#10;    constexpr bool operator!=(const Point2D &amp;rhs) const noexcept { return !(*this == rhs); }&#10;    constexpr bool operator&lt;(const Point2D &amp;rhs) const noexcept { return x &lt; rhs.x || (x == rhs.x &amp;&amp; y &lt; rhs.y); }&#10;    constexpr bool operator&gt;(const Point2D &amp;rhs) const noexcept { return rhs &lt; *this; }&#10;    constexpr bool operator&lt;=(const Point2D &amp;rhs) const noexcept { return !(*this &gt; rhs); }&#10;    constexpr bool operator&gt;=(const Point2D &amp;rhs) const noexcept { return !(*this &lt; rhs); }&#10;&#10;    constexpr Point2D operator+(const Point2D &amp;rhs) const noexcept { return {x + rhs.x, y + rhs.y}; }&#10;    constexpr Point2D operator-(const Point2D &amp;rhs) const noexcept { return {x - rhs.x, y - rhs.y}; }&#10;    constexpr Point2D operator*(const T &amp;k) const noexcept { return {k * x, k * y}; }&#10;    constexpr Point2D operator/(const T &amp;k) const noexcept { return {x / k, y / k}; }&#10;    constexpr Point2D &amp;operator+=(const Point2D &amp;rhs) noexcept { return *this = *this + rhs; }&#10;    constexpr Point2D &amp;operator-=(const Point2D &amp;rhs) noexcept { return *this = *this - rhs; }&#10;    constexpr Point2D &amp;operator*=(const T &amp;k) noexcept { return *this = *this * k; }&#10;    constexpr Point2D &amp;operator/=(const T &amp;k) noexcept { return *this = *this / k; }&#10;    constexpr Point2D &amp;operator--(int) noexcept { return *this -= Point2D(1, 1); };&#10;    constexpr Point2D &amp;operator++(int) noexcept { return *this += Point2D(1, 1); };&#10;    constexpr Point2D operator-() const noexcept { return {-x, -y}; }&#10;&#10;    constexpr T operator*(const Point2D &amp;rhs) const noexcept { return x * rhs.x + y * rhs.y; }&#10;&#10;    [[nodiscard]] constexpr Point2D nor() const noexcept { return {y, -x}; }&#10;    [[nodiscard]] constexpr long double hypot() const noexcept { return ::hypotl(x, y); }&#10;    [[nodiscard]] constexpr bool inGrid(const T &amp;H, const T &amp;W) const noexcept { return 0 &lt;= x &amp;&amp; x &lt; H &amp;&amp; 0 &lt;= y &amp;&amp; y &lt; W; }&#10;    template&lt;class U&gt;&#10;    [[nodiscard]] constexpr U &amp;operator[](vector&lt;vector&lt;U&gt;&gt; &amp;v) const noexcept { return v[x][y]; }&#10;&#10;    constexpr friend istream &amp;operator&gt;&gt;(istream &amp;is, Point2D &amp;p) { return is &gt;&gt; p.x &gt;&gt; p.y; }&#10;    constexpr friend ostream &amp;operator&lt;&lt;(ostream &amp;os, const Point2D &amp;p) { return os &lt;&lt; p.x &lt;&lt; ' ' &lt;&lt; p.y; }&#10;};&#10;&#10;using pnt = Point2D&lt;lint&gt;;&#10;&#10;template&lt;class T&gt;&#10;struct Matrix2D {&#10;    Point2D&lt;T&gt; r0{}, r1{};&#10;&#10;    constexpr Matrix2D() = default;&#10;    constexpr Matrix2D(const Point2D&lt;T&gt; &amp;r0, const Point2D&lt;T&gt; &amp;r1) noexcept: r0(r0), r1(r1) {};&#10;&#10;    constexpr bool operator==(const Matrix2D &amp;rhs) const noexcept { return r0 == rhs.r0 &amp;&amp; r1 == rhs.r1; }&#10;    constexpr bool operator!=(const Matrix2D &amp;rhs) const noexcept { return !(*this == rhs); }&#10;&#10;    constexpr Matrix2D operator+(const Matrix2D &amp;rhs) const noexcept { return {r0 + rhs.r0, r1 + rhs.r1}; }&#10;    constexpr Matrix2D operator-(const Matrix2D &amp;rhs) const noexcept { return {r0 - rhs.r0, r1 - rhs.r1}; }&#10;    constexpr Matrix2D operator*(const Matrix2D &amp;rhs) const noexcept {&#10;        const Matrix2D rhs_T = rhs.trans();&#10;        return {{r0 * rhs_T.r0, r0 * rhs_T.r1},&#10;                {r1 * rhs_T.r0, r1 * rhs_T.r1}};&#10;    }&#10;    constexpr Matrix2D &amp;operator+=(const Matrix2D &amp;rhs) noexcept { return *this = *this + rhs; }&#10;    constexpr Matrix2D &amp;operator-=(const Matrix2D &amp;rhs) noexcept { return *this = *this - rhs; }&#10;    constexpr Matrix2D &amp;operator*=(const Matrix2D &amp;rhs) noexcept { return *this = *this * rhs; }&#10;    constexpr Matrix2D operator-() const noexcept { return {-r0, -r1}; }&#10;&#10;    constexpr Point2D&lt;T&gt; operator*(const Point2D&lt;T&gt; &amp;b_T) const noexcept { return {r0 * b_T, r1 * b_T}; }&#10;&#10;    [[nodiscard]] constexpr Matrix2D trans() const noexcept {&#10;        return {{r0.x, r1.x},&#10;                {r0.y, r1.y}};&#10;    }&#10;    [[nodiscard]] constexpr Matrix2D identity() const noexcept {&#10;        return {{1, 0},&#10;                {0, 1}};&#10;    }&#10;    [[nodiscard]] constexpr Matrix2D pow(lint n) const noexcept {&#10;        Matrix2D res{Matrix2D().identity()}, tmp{*this};&#10;        while (n &gt; 0) {&#10;            if (n &amp; 1) res *= tmp;&#10;            tmp *= tmp;&#10;            n &gt;&gt;= 1;&#10;        }&#10;        return res;&#10;    }&#10;    [[nodiscard]] constexpr T det() const noexcept { return r0 * r1.nor(); }&#10;};&#10;&#10;using mat = Matrix2D&lt;lint&gt;;&#10;" description="" toReformat="false" toShortenFQNames="true">
    <context>
        <option name="OC_DECLARATION_C" value="true"/>
        <option name="OC_DECLARATION_CPP" value="true"/>
        <option name="OC_STATEMENT_C" value="true"/>
        <option name="OC_STATEMENT_CPP" value="true"/>
    </context>
</template>