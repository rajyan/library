<template name="myprint" value="struct params { string d, l, r, lp, rp; };&#10;#ifdef _DEBUG&#10;params p_{&quot;,&quot;, &quot;[&quot;, &quot;]&quot;, &quot;(&quot;, &quot;)&quot;};&#10;#else&#10;params p_{&quot; &quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;};&#10;#endif&#10;&#10;template&lt;typename T, typename = void_t&lt;&gt;&gt;&#10;struct iterable: false_type {};&#10;template&lt;typename T&gt;&#10;struct iterable&lt;T, void_t&lt;decltype(declval&lt;T&gt;().begin(), declval&lt;T&gt;().end())&gt;&gt;: negation&lt;is_same&lt;T, string&gt;&gt; {};&#10;&#10;template&lt;class T&gt;&#10;enable_if_t&lt;!iterable&lt;T&gt;::value, string&gt; str(const T &amp;v) {&#10;    stringstream ss;&#10;    ss &lt;&lt; v;&#10;    return ss.str();&#10;}&#10;template&lt;class ...T&gt;&#10;string str(const pair&lt;T...&gt; &amp;t) {&#10;    return p_.lp + str(t.first) + p_.d + str(t.second) + p_.rp;&#10;}&#10;template&lt;class T&gt;&#10;enable_if_t&lt;iterable&lt;T&gt;::value, string&gt; str(const T &amp;r) {&#10;    string res(p_.l);&#10;    for (const auto &amp;e : r) res += str(e) + (&amp;e != &amp;*prev(r.end()) ? p_.d : &quot;&quot;);&#10;    return res + p_.r;&#10;}&#10;&#10;template&lt;class T&gt;&#10;void print(T &amp;&amp;o) {&#10;    cout &lt;&lt; str(o) &lt;&lt; '\n';&#10;    exit(0);&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <context>
        <option name="OC_DECLARATION_C" value="true"/>
        <option name="OC_DECLARATION_CPP" value="true"/>
    </context>
</template>