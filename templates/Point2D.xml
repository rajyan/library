<template name="mypoint2d" value="template&lt;class T&gt;&#10;struct Point2D {&#10;    T x, y;&#10;    constexpr explicit Point2D(T x = 0, T y = 0) noexcept: x(x), y(y) {};&#10;    constexpr explicit Point2D(pair &lt;T, T&gt; &amp;p) noexcept: x(p.first), y(p.second) {};&#10;    constexpr bool operator==(const Point2D &amp;rhs) const noexcept { return x == rhs.x &amp;&amp; y == rhs.y; }&#10;    constexpr bool operator!=(const Point2D &amp;rhs) const noexcept { return !((*this) == rhs); }&#10;    constexpr bool operator&lt;(const Point2D &amp;rhs) const noexcept { return x &lt; rhs.x || (x == rhs.x &amp;&amp; y &lt; rhs.y); }&#10;    constexpr bool operator&gt;(const Point2D &amp;rhs) const noexcept { return rhs &lt; (*this); }&#10;    constexpr bool operator&lt;=(const Point2D &amp;rhs) const noexcept { return !((*this) &gt; rhs); }&#10;    constexpr bool operator&gt;=(const Point2D &amp;rhs) const noexcept { return !((*this) &lt; rhs); }&#10;    constexpr Point2D operator+(const Point2D &amp;rhs) const noexcept { return {x + rhs.x, y + rhs.y}; }&#10;    constexpr Point2D operator-(const Point2D &amp;rhs) const noexcept { return {x - rhs.x, y - rhs.y}; }&#10;    constexpr Point2D operator*(const T &amp;k) const noexcept { return {k * x, k * y}; }&#10;    constexpr Point2D operator/(const T &amp;k) const noexcept { return {x / k, y / k}; }&#10;    constexpr Point2D &amp;operator+=(const Point2D &amp;rhs) noexcept { return ((*this) = (*this) + rhs); }&#10;    constexpr Point2D &amp;operator-=(const Point2D &amp;rhs) noexcept { return ((*this) = (*this) - rhs); }&#10;    constexpr Point2D &amp;operator*=(const T &amp;k) noexcept { return ((*this) = (*this) * k); }&#10;    constexpr Point2D &amp;operator/=(const T &amp;k) noexcept { return ((*this) = (*this) / k); }&#10;    constexpr Point2D &amp;operator--(int) noexcept { return ((*this) -= Point2D(1, 1)); };&#10;    constexpr Point2D &amp;operator++(int) noexcept { return ((*this) += Point2D(1, 1)); };&#10;    constexpr Point2D operator-() const noexcept { return {-x, -y}; }&#10;    constexpr T operator*(const Point2D &amp;rhs) const noexcept { return x * rhs.x + y * rhs.y; }&#10;    constexpr Point2D nor() const noexcept { return {y, -x}; }&#10;    [[nodiscard]] constexpr long double hypot() const noexcept { return ::hypotl(x, y); }&#10;    friend istream &amp;operator&gt;&gt;(istream &amp;is, Point2D &amp;p) { return is &gt;&gt; p.x &gt;&gt; p.y; }&#10;    friend ostream &amp;operator&lt;&lt;(ostream &amp;os, const Point2D &amp;p) { return os &lt;&lt; p.x &lt;&lt; &quot; &quot; &lt;&lt; p.y; }&#10;    template&lt;class U&gt;&#10;    U &amp;operator[](vector&lt;vector&lt;U&gt;&gt; &amp;v) { return v[x][y]; }&#10;};&#10;&#10;using pnt = Point2D&lt;lint&gt;;&#10;" description="" toReformat="false" toShortenFQNames="true">
    <context>
        <option name="OC_DECLARATION_C" value="true"/>
        <option name="OC_DECLARATION_CPP" value="true"/>
        <option name="OC_STATEMENT_C" value="true"/>
        <option name="OC_STATEMENT_CPP" value="true"/>
    </context>
</template>