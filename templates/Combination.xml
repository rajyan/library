<template name="mycombination" value="template&lt;int Modulo = MOD&gt;&#10;struct Mint {&#10;&#10;    lint val;&#10;    constexpr explicit Mint(lint v = 0) noexcept: val(v % Modulo) { if (val &lt; 0) val += Modulo; }&#10;&#10;    constexpr Mint &amp;operator+=(const Mint &amp;r) noexcept {&#10;        val += r.val;&#10;        if (val &gt;= Modulo) val -= Modulo;&#10;        return *this;&#10;    }&#10;    constexpr Mint &amp;operator-=(const Mint &amp;r) noexcept {&#10;        val -= r.val;&#10;        if (val &lt; 0) val += Modulo;&#10;        return *this;&#10;    }&#10;    constexpr Mint &amp;operator*=(const Mint &amp;r) noexcept {&#10;        val = val * r.val % Modulo;&#10;        return *this;&#10;    }&#10;    constexpr Mint &amp;operator/=(const Mint &amp;r) noexcept {&#10;        lint a = r.val, b = Modulo, u = 1, v = 0;&#10;        while (b) {&#10;            lint t = a / b;&#10;            a -= t * b;&#10;            swap(a, b);&#10;            u -= t * v;&#10;            swap(u, v);&#10;        }&#10;        val = val * u % Modulo;&#10;        if (val &lt; 0) val += Modulo;&#10;        return *this;&#10;    }&#10;&#10;    constexpr Mint operator+(const Mint &amp;r) const noexcept { return Mint(*this) += r; }&#10;    constexpr Mint operator-(const Mint &amp;r) const noexcept { return Mint(*this) -= r; }&#10;    constexpr Mint operator*(const Mint &amp;r) const noexcept { return Mint(*this) *= r; }&#10;    constexpr Mint operator/(const Mint &amp;r) const noexcept { return Mint(*this) /= r; }&#10;&#10;    constexpr int getmod() { return Modulo; }&#10;    constexpr Mint operator-() const noexcept { return val ? Modulo - val : 0; }&#10;&#10;    constexpr bool operator==(const Mint &amp;r) const noexcept { return val == r.val; }&#10;    constexpr bool operator!=(const Mint &amp;r) const noexcept { return val != r.val; }&#10;&#10;    friend ostream &amp;operator&lt;&lt;(ostream &amp;os, const Mint&lt;Modulo&gt; &amp;x) noexcept { return os &lt;&lt; x.val; }&#10;    friend istream &amp;operator&gt;&gt;(istream &amp;is, Mint&lt;Modulo&gt; &amp;x) noexcept {&#10;        lint tmp;&#10;        is &gt;&gt; tmp;&#10;        x = Mint(tmp);&#10;        return is;&#10;    }&#10;&#10;    constexpr Mint pow(lint n) noexcept {&#10;        Mint res{1}, tmp{val};&#10;        while (n &gt; 0) {&#10;            if (n &amp; 1) res *= tmp;&#10;            tmp *= tmp;&#10;            n &gt;&gt;= 1;&#10;        }&#10;        return res;&#10;    }&#10;};&#10;&#10;using mint = Mint&lt;&gt;;&#10;&#10;template&lt;class T = mint&gt;&#10;class Combination {&#10;private:&#10;    vector&lt;T&gt; fac, inv, finv;&#10;&#10;    void build(int N) {&#10;        fac[0] = fac[1] = 1;&#10;        inv[1] = 1;&#10;        finv[0] = finv[1] = 1;&#10;&#10;        for (int i = 2; i &lt; N; i++) {&#10;            fac[i] = fac[i - 1] * i;&#10;            inv[i] = -inv[MOD % i] * (MOD / i);&#10;            finv[i] = finv[i - 1] * inv[i];&#10;        }&#10;    }&#10;&#10;public:&#10;    Combination(int N = 110000) : fac(N + 1), inv(N + 1), finv(N + 1) { build(N + 1); }&#10;&#10;    T operator()(int n, int k) {&#10;        if (n &lt; k || k &lt; 0) return 0LL;&#10;        return fac[n] * (finv[k] * finv[n - k]);&#10;    }&#10;&#10;};&#10;" description="" toReformat="false" toShortenFQNames="true">
    <context>
        <option name="OC_DECLARATION_C" value="true"/>
        <option name="OC_DECLARATION_CPP" value="true"/>
        <option name="OC_STATEMENT_C" value="true"/>
        <option name="OC_STATEMENT_CPP" value="true"/>
    </context>
</template>