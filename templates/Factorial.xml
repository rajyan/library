<template name="myfactorial" value="class Factorial {&#10;private:&#10;    vector&lt;lint&gt; fac, inv, finv;&#10;&#10;    void build(int N) {&#10;        fac[0] = fac[1] = 1;&#10;        inv[1] = 1;&#10;        finv[0] = finv[1] = 1;&#10;&#10;        for (int i = 2; i &lt; N; i++) {&#10;            fac[i] = fac[i - 1] * i % MOD;&#10;            inv[i] = MOD - inv[MOD % i] * (MOD / i) % MOD;&#10;            finv[i] = finv[i - 1] * inv[i] % MOD;&#10;        }&#10;    }&#10;&#10;public:&#10;    explicit Factorial(int N = 110000) : fac(N + 1), inv(N + 1), finv(N + 1) { build(N + 1); }&#10;&#10;    [[nodiscard]] lint Cmod(int n, int k) {&#10;        if (n &lt; k || k &lt; 0) return 0LL;&#10;        return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;&#10;    }&#10;&#10;    [[nodiscard]] lint Pmod(int n, int k) {&#10;        if (n &lt; k || k &lt; 0) return 0LL;&#10;        return fac[n] * finv[n - k] % MOD;&#10;    }&#10;&#10;    [[nodiscard]] lint Hmod(int n, int k) {&#10;        if (n &lt; 0 || k &lt; 0) return 0LL;&#10;        return k == 0 ? 1 : Cmod(n + k - 1, k);&#10;    }&#10;&#10;};&#10;" description="" toReformat="false" toShortenFQNames="true">
    <context>
        <option name="OC_DECLARATION_C" value="true"/>
        <option name="OC_DECLARATION_CPP" value="true"/>
        <option name="OC_STATEMENT_C" value="true"/>
        <option name="OC_STATEMENT_CPP" value="true"/>
    </context>
</template>